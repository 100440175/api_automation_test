# Generated by Django 2.0.1 on 2018-01-11 07:18

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ApiGeneralMock',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('http_code', models.CharField(max_length=50, verbose_name='HTTP状态')),
                ('data', models.TextField(blank=True, max_length=4096, null=True, verbose_name='内容')),
            ],
            options={
                'verbose_name': '普通mock',
                'verbose_name_plural': '普通mock管理',
            },
        ),
        migrations.CreateModel(
            name='ApiGroupLevelFirst',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口一级分组名称')),
            ],
            options={
                'verbose_name': '接口分组',
                'verbose_name_plural': '接口分组',
            },
        ),
        migrations.CreateModel(
            name='ApiGroupLevelSecond',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口二级分组名称')),
                ('ApiGroupLevelFirst_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiGroupLevelFirst', verbose_name='项目ID')),
            ],
            options={
                'verbose_name': '接口二级分组',
                'verbose_name_plural': '接口二级分组',
            },
        ),
        migrations.CreateModel(
            name='ApiInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口名称')),
                ('http_type', models.CharField(max_length=50, verbose_name='http/https')),
                ('request_type', models.CharField(max_length=50, verbose_name='请求方式')),
                ('api_address', models.CharField(max_length=1024, verbose_name='接口地址')),
                ('request_parameter_type', models.CharField(max_length=50, verbose_name='请求参数格式')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最近更新')),
                ('user_update', models.CharField(max_length=50, verbose_name='更新人')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('ApiGroupLevelFirst_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiGroupLevelFirst', verbose_name='所属一级分组')),
                ('ApiGroupLevelSecond_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiGroupLevelSecond', verbose_name='所属二级分组')),
            ],
            options={
                'verbose_name': '接口',
                'verbose_name_plural': '接口管理',
            },
        ),
        migrations.CreateModel(
            name='ApiOperationHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user', models.CharField(max_length=50, verbose_name='用户姓名')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='操作内容')),
                ('api_info_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '接口操作历史',
                'verbose_name_plural': '接口操作历史',
            },
        ),
        migrations.CreateModel(
            name='APIRequestHead',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=128, verbose_name='标签')),
                ('value', models.CharField(max_length=1024, verbose_name='内容')),
                ('api_info_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '请求头',
                'verbose_name_plural': '请求头管理',
            },
        ),
        migrations.CreateModel(
            name='APIRequestHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('request_time', models.DateTimeField(auto_now_add=True, verbose_name='请求时间')),
                ('request_type', models.CharField(max_length=50, verbose_name='请求方法')),
                ('request_address', models.CharField(max_length=1024, verbose_name='请求地址')),
                ('http_code', models.CharField(max_length=50, verbose_name='HTTP状态')),
                ('api_info_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '接口请求历史',
                'verbose_name_plural': '接口请求历史',
            },
        ),
        migrations.CreateModel(
            name='APIRequestParameter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='参数名')),
                ('type', models.CharField(max_length=50, verbose_name='参数类型')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('input_limits', models.CharField(max_length=1024, verbose_name='输入限制')),
                ('required', models.BooleanField(default=True, verbose_name='是否必填')),
                ('api_info_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '请求参数',
                'verbose_name_plural': '请求参数管理',
            },
        ),
        migrations.CreateModel(
            name='APIRequestParameterValue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=50, verbose_name='参数值')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('APIRequestParameter_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.APIRequestParameter', verbose_name='参数ID')),
            ],
            options={
                'verbose_name': '请求参数值',
                'verbose_name_plural': '请求参数值管理',
            },
        ),
        migrations.CreateModel(
            name='APIResponseData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='字段')),
                ('type', models.CharField(max_length=50, verbose_name='字段类型')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('required', models.BooleanField(default=True, verbose_name='是否必须包含')),
                ('api_info_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '返回参数',
                'verbose_name_plural': '返回参数管理',
            },
        ),
        migrations.CreateModel(
            name='APIResponseParameterValue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.TextField(max_length=4096, verbose_name='返回参数值')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('APIResponseData_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.APIResponseData', verbose_name='返回参数ID')),
            ],
            options={
                'verbose_name': '返回参数值',
                'verbose_name_plural': '返回参数值管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationCaseApi',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口名称')),
                ('http_type', models.CharField(max_length=50, verbose_name='HTTP/HTTPS')),
                ('request_type', models.CharField(max_length=50, verbose_name='请求方式')),
                ('address', models.CharField(max_length=1024, verbose_name='接口地址')),
                ('header', models.CharField(max_length=1024, verbose_name='请求头')),
                ('request_parameter_type', models.CharField(max_length=50, verbose_name='参数请求格式')),
                ('examine_type', models.CharField(max_length=50, verbose_name='校验方式')),
                ('http_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='HTTP状态')),
                ('response_data', models.CharField(blank=True, max_length=10240, null=True, verbose_name='返回内容')),
            ],
            options={
                'verbose_name': '用例接口',
                'verbose_name_plural': '用例接口管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationGroupLevelFirst',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='用例一级分组')),
            ],
            options={
                'verbose_name': '用例分组',
                'verbose_name_plural': '用例分组管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationGroupLevelSecond',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='用例二级分组名称')),
                ('AutomationGroupLevelFirst_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.AutomationGroupLevelFirst', verbose_name='一级分组ID')),
            ],
            options={
                'verbose_name': '用例二级分组',
                'verbose_name_plural': '用例二级分组管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationParameter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=1024, verbose_name='参数名')),
                ('value', models.CharField(max_length=10240, verbose_name='内容')),
                ('interrelate', models.BooleanField(default=False, verbose_name='是否关联')),
                ('AutomationCaseApi_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.AutomationCaseApi', verbose_name='参数ID')),
            ],
            options={
                'verbose_name': '接口参数',
                'verbose_name_plural': '接口参数管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationTestCase',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('case_name', models.CharField(max_length=50, verbose_name='用例名称')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('AutomationGroupLevelFirst_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.AutomationGroupLevelFirst', verbose_name='所属用例一级分组')),
                ('AutomationGroupLevelSecond_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.AutomationGroupLevelSecond', verbose_name='所属用例二级组')),
            ],
            options={
                'verbose_name': '自动化测试用例',
                'verbose_name_plural': '自动化测试用例',
            },
        ),
        migrations.CreateModel(
            name='CustomMethod',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='方法名')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('type', models.CharField(max_length=50, verbose_name='类型')),
                ('data_code', models.TextField(max_length=2048, verbose_name='代码')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
            ],
            options={
                'verbose_name': '自定义方法',
                'verbose_name_plural': '自定义方法',
            },
        ),
        migrations.CreateModel(
            name='GlobalHost',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='名称')),
                ('host', models.CharField(max_length=1024, verbose_name='Host地址')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
            ],
            options={
                'verbose_name': 'HOST',
                'verbose_name_plural': 'HOST管理',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='项目名称')),
                ('version', models.CharField(max_length=50, verbose_name='版本')),
                ('type', models.CharField(max_length=50, verbose_name='类型')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最近修改时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '项目',
                'verbose_name_plural': '项目',
            },
        ),
        migrations.CreateModel(
            name='ProjectDynamic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('type', models.CharField(max_length=50, verbose_name='操作类型')),
                ('operation_object', models.CharField(max_length=50, verbose_name='操作对象')),
                ('user', models.CharField(max_length=50, verbose_name='操作人')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('project_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.Project', verbose_name='项目ID')),
            ],
            options={
                'verbose_name': '项目动态',
                'verbose_name_plural': '项目动态',
            },
        ),
        migrations.CreateModel(
            name='ProjectMember',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('permission_type', models.CharField(max_length=50, verbose_name='权限角色')),
                ('project_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.Project', verbose_name='项目ID')),
            ],
            options={
                'verbose_name': '项目成员',
                'verbose_name_plural': '项目成员',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='账号')),
                ('password', models.CharField(max_length=50, verbose_name='登录密码')),
                ('nick_name', models.CharField(max_length=50, verbose_name='真实姓名')),
                ('token', models.CharField(max_length=50, verbose_name='用户令牌')),
                ('permission_type', models.CharField(max_length=50, verbose_name='权限类型')),
                ('email', models.EmailField(blank=True, max_length=128, null=True, verbose_name='邮箱')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='手机号')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='最近登录')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
        ),
        migrations.AddField(
            model_name='projectmember',
            name='user_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.User', verbose_name='用户ID'),
        ),
        migrations.AddField(
            model_name='project',
            name='user',
            field=models.ManyToManyField(through='api_test.ProjectMember', to='api_test.User'),
        ),
        migrations.AddField(
            model_name='globalhost',
            name='project_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.Project', verbose_name='项目ID'),
        ),
        migrations.AddField(
            model_name='custommethod',
            name='project_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.Project', verbose_name='项目ID'),
        ),
        migrations.AddField(
            model_name='automationgrouplevelfirst',
            name='project_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.Project', verbose_name='项目ID'),
        ),
        migrations.AddField(
            model_name='automationcaseapi',
            name='AutomationTestCase_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.AutomationTestCase', verbose_name='用例ID'),
        ),
        migrations.AddField(
            model_name='apigrouplevelfirst',
            name='project_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.Project', verbose_name='项目ID'),
        ),
        migrations.AddField(
            model_name='apigeneralmock',
            name='api_info_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiInfo', verbose_name='接口ID'),
        ),
    ]
