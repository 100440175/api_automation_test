# Generated by Django 2.0.1 on 2018-01-16 09:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ApiGeneralMock',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('httpCode', models.CharField(choices=[('200', '200'), ('404', '404'), ('400', '400'), ('502', '502'), ('500', '500'), ('302', '302')], max_length=50, verbose_name='HTTP状态')),
                ('data', models.TextField(blank=True, max_length=4096, null=True, verbose_name='内容')),
            ],
            options={
                'verbose_name': '普通mock',
                'verbose_name_plural': '普通mock管理',
            },
        ),
        migrations.CreateModel(
            name='ApiGroupLevelFirst',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口一级分组名称')),
            ],
            options={
                'verbose_name': '接口分组',
                'verbose_name_plural': '接口分组',
            },
        ),
        migrations.CreateModel(
            name='ApiGroupLevelSecond',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口二级分组名称')),
                ('ApiGroupLevelFirst_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.ApiGroupLevelFirst', verbose_name='项目ID')),
            ],
            options={
                'verbose_name': '接口二级分组',
                'verbose_name_plural': '接口二级分组',
            },
        ),
        migrations.CreateModel(
            name='ApiInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口名称')),
                ('http_type', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS')], default='HTTP', max_length=50, verbose_name='http/https')),
                ('requestType', models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], max_length=50, verbose_name='请求方式')),
                ('apiAddress', models.CharField(max_length=1024, verbose_name='接口地址')),
                ('requestParameterType', models.CharField(choices=[('form-data', '表单(form-data)'), ('raw', '源数据(raw)'), ('Restful', 'Restful')], max_length=50, verbose_name='请求参数格式')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
                ('lastUpdateTime', models.DateTimeField(auto_now=True, verbose_name='最近更新')),
                ('userUpdate', models.CharField(max_length=50, verbose_name='更新人')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('ApiGroupLevelFirst_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiGroupLevelFirst', verbose_name='所属一级分组')),
                ('ApiGroupLevelSecondId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.ApiGroupLevelSecond', verbose_name='所属二级分组')),
            ],
            options={
                'verbose_name': '接口',
                'verbose_name_plural': '接口管理',
            },
        ),
        migrations.CreateModel(
            name='ApiOperationHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user', models.CharField(max_length=50, verbose_name='用户姓名')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='操作内容')),
                ('apiInfo_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '接口操作历史',
                'verbose_name_plural': '接口操作历史',
            },
        ),
        migrations.CreateModel(
            name='APIRequestHead',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=128, verbose_name='标签')),
                ('value', models.CharField(max_length=1024, verbose_name='内容')),
                ('apiInfo_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '请求头',
                'verbose_name_plural': '请求头管理',
            },
        ),
        migrations.CreateModel(
            name='APIRequestHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('requestTime', models.DateTimeField(auto_now_add=True, verbose_name='请求时间')),
                ('requestType', models.CharField(max_length=50, verbose_name='请求方法')),
                ('requestAddress', models.CharField(max_length=1024, verbose_name='请求地址')),
                ('httpCode', models.CharField(max_length=50, verbose_name='HTTP状态')),
                ('apiInfo_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '接口请求历史',
                'verbose_name_plural': '接口请求历史',
            },
        ),
        migrations.CreateModel(
            name='APIRequestParameter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='参数名')),
                ('type', models.CharField(choices=[('text', 'text'), ('file', 'file')], max_length=50, verbose_name='参数类型')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('inputLimits', models.CharField(max_length=1024, verbose_name='输入限制')),
                ('required', models.BooleanField(default=True, verbose_name='是否必填')),
                ('apiInfo_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '请求参数',
                'verbose_name_plural': '请求参数管理',
            },
        ),
        migrations.CreateModel(
            name='APIRequestParameterValue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=50, verbose_name='参数值')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('type', models.CharField(max_length=50, verbose_name='默认')),
                ('APIRequestParameterId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.APIRequestParameter', verbose_name='参数ID')),
            ],
            options={
                'verbose_name': '请求参数值',
                'verbose_name_plural': '请求参数值管理',
            },
        ),
        migrations.CreateModel(
            name='APIResponseData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='字段')),
                ('type', models.CharField(choices=[('Int', 'Int'), ('String', 'String')], max_length=50, verbose_name='字段类型')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('required', models.BooleanField(default=True, verbose_name='是否必须包含')),
                ('apiInfo_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.ApiInfo', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '返回参数',
                'verbose_name_plural': '返回参数管理',
            },
        ),
        migrations.CreateModel(
            name='APIResponseParameterValue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.TextField(max_length=4096, verbose_name='返回参数值')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('APIResponseDataId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.APIResponseData', verbose_name='返回参数ID')),
            ],
            options={
                'verbose_name': '返回参数值',
                'verbose_name_plural': '返回参数值管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationCaseApi',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='接口名称')),
                ('http_type', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS')], default='HTTP', max_length=50, verbose_name='HTTP/HTTPS')),
                ('requestType', models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], max_length=50, verbose_name='请求方式')),
                ('address', models.CharField(max_length=1024, verbose_name='接口地址')),
                ('header', models.CharField(max_length=1024, verbose_name='请求头')),
                ('requestParameterType', models.CharField(choices=[('form-data', '表单(form-data)'), ('raw', '源数据(raw)'), ('Restful', 'Restful')], max_length=50, verbose_name='参数请求格式')),
                ('examineType', models.CharField(choices=[('no_check', '不校验'), ('json', 'JSON校验'), ('entirely_check', '完全校验'), ('Regular_check', '正则校验')], max_length=50, verbose_name='校验方式')),
                ('httpCode', models.CharField(blank=True, choices=[('200', '200'), ('404', '404'), ('400', '400'), ('502', '502'), ('500', '500'), ('302', '302')], max_length=50, null=True, verbose_name='HTTP状态')),
                ('responseData', models.TextField(blank=True, max_length=10240, null=True, verbose_name='返回内容')),
            ],
            options={
                'verbose_name': '用例接口',
                'verbose_name_plural': '用例接口管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationGroupLevelFirst',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='用例一级分组')),
            ],
            options={
                'verbose_name': '用例分组',
                'verbose_name_plural': '用例分组管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationGroupLevelSecond',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='用例二级分组名称')),
                ('AutomationGroupLevelFirst_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.AutomationGroupLevelFirst', verbose_name='一级分组ID')),
            ],
            options={
                'verbose_name': '用例二级分组',
                'verbose_name_plural': '用例二级分组管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationParameter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=1024, verbose_name='参数名')),
                ('value', models.CharField(max_length=10240, verbose_name='内容')),
                ('interrelate', models.BooleanField(default=False, verbose_name='是否关联')),
                ('AutomationCaseApiId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.AutomationCaseApi', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '接口参数',
                'verbose_name_plural': '接口参数管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationTestCase',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('caseName', models.CharField(max_length=50, verbose_name='用例名称')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('updateTime', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('AutomationGroupLevelFirst_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.AutomationGroupLevelFirst', verbose_name='所属用例一级分组')),
                ('AutomationGroupLevelSecond_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.AutomationGroupLevelSecond', verbose_name='所属用例二级组')),
            ],
            options={
                'verbose_name': '自动化测试用例',
                'verbose_name_plural': '自动化测试用例',
            },
        ),
        migrations.CreateModel(
            name='AutomationTestResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result', models.CharField(max_length=50, verbose_name='测试结果')),
                ('http_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='http状态')),
                ('response_data', models.TextField(blank=True, null=True, verbose_name='实际返回内容')),
                ('test_time', models.DateTimeField(auto_now_add=True, verbose_name='测试时间')),
                ('AutomationCaseApi_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.AutomationCaseApi', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '测试结果',
                'verbose_name_plural': '测试结果管理',
            },
        ),
        migrations.CreateModel(
            name='AutomationTestTask',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='任务名称')),
                ('type', models.CharField(choices=[('circulation', '循环'), ('timing', '定时')], max_length=50, verbose_name='类型')),
                ('frequency', models.IntegerField(blank=True, null=True, verbose_name='间隔')),
                ('unit', models.CharField(blank=True, choices=[('s', '秒'), ('m', '分'), ('h', '时'), ('d', '天'), ('w', '周')], max_length=50, null=True, verbose_name='单位')),
                ('startTime', models.DateTimeField(max_length=50, verbose_name='开始时间')),
                ('endTime', models.DateTimeField(max_length=50, verbose_name='结束时间')),
                ('AutomationTestCase_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.AutomationTestCase', verbose_name='接口ID')),
            ],
            options={
                'verbose_name': '用例定时任务',
                'verbose_name_plural': '用例定时任务管理',
            },
        ),
        migrations.CreateModel(
            name='CustomMethod',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='方法名')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('type', models.CharField(max_length=50, verbose_name='类型')),
                ('dataCode', models.TextField(max_length=2048, verbose_name='代码')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
            ],
            options={
                'verbose_name': '自定义方法',
                'verbose_name_plural': '自定义方法',
            },
        ),
        migrations.CreateModel(
            name='GlobalHost',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='名称')),
                ('host', models.CharField(max_length=1024, verbose_name='Host地址')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
            ],
            options={
                'verbose_name': 'HOST',
                'verbose_name_plural': 'HOST管理',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='项目名称')),
                ('version', models.CharField(max_length=50, verbose_name='版本')),
                ('type', models.CharField(choices=[('Web', 'Web'), ('App', 'App')], max_length=50, verbose_name='类型')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('status', models.BooleanField(default=True, verbose_name='状态')),
                ('LastUpdateTime', models.DateTimeField(auto_now=True, verbose_name='最近修改时间')),
                ('createTime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '项目',
                'verbose_name_plural': '项目',
            },
        ),
        migrations.CreateModel(
            name='ProjectDynamic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('type', models.CharField(max_length=50, verbose_name='操作类型')),
                ('operationObject', models.CharField(max_length=50, verbose_name='操作对象')),
                ('user', models.CharField(max_length=50, verbose_name='操作人')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.Project', verbose_name='项目ID')),
            ],
            options={
                'verbose_name': '项目动态',
                'verbose_name_plural': '项目动态',
            },
        ),
        migrations.CreateModel(
            name='ProjectMember',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('permission_type', models.CharField(choices=[('admin', '超级管理员'), ('developer', '开发人员'), ('tester', '测试人员')], max_length=50, verbose_name='权限角色')),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.Project', verbose_name='项目ID')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户ID')),
            ],
            options={
                'verbose_name': '项目成员',
                'verbose_name_plural': '项目成员',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='user',
            field=models.ManyToManyField(through='api_test.ProjectMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='globalhost',
            name='project_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.Project', verbose_name='项目ID'),
        ),
        migrations.AddField(
            model_name='custommethod',
            name='project_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.Project', verbose_name='项目ID'),
        ),
        migrations.AddField(
            model_name='automationtesttask',
            name='Host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.GlobalHost', verbose_name='HOST'),
        ),
        migrations.AddField(
            model_name='automationgrouplevelfirst',
            name='project_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.Project', verbose_name='项目ID'),
        ),
        migrations.AddField(
            model_name='automationcaseapi',
            name='AutomationTestCase_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api_test.AutomationTestCase', verbose_name='用例ID'),
        ),
        migrations.AddField(
            model_name='apiinfo',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_test.Project', verbose_name='所属项目'),
        ),
        migrations.AddField(
            model_name='apigrouplevelfirst',
            name='project_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.Project', verbose_name='项目ID'),
        ),
        migrations.AddField(
            model_name='apigeneralmock',
            name='apiInfo_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_test.ApiInfo', verbose_name='接口ID'),
        ),
    ]
